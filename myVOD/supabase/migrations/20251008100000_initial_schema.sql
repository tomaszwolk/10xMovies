-- migration: 20251008100000_initial_schema.sql
-- description: sets up the initial database schema for myvod.

-- enable required extensions
create extension if not exists "unaccent" with schema "extensions";
create extension if not exists "pg_trgm" with schema "extensions";

-- immutable unaccent function
CREATE OR REPLACE FUNCTION public.immutable_unaccent(text)
RETURNS text LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT AS
$func$
SELECT extensions.unaccent($1)
$func$;

-- create platform table
create table "public"."platform" (
    "id" smallint generated by default as identity not null,
    "platform_slug" text not null,
    "platform_name" text not null
);

-- set primary key for platform
alter table "public"."platform" add constraint "platform_pkey" primary key ("id");

-- add unique constraint for platform_slug
alter table "public"."platform" add constraint "platform_platform_slug_key" unique ("platform_slug");

-- create movie table
create table "public"."movie" (
    "tconst" text not null,
    "primary_title" text not null,
    "original_title" text,
    "start_year" smallint,
    "genres" text[],
    "avg_rating" numeric(3, 1),
    "num_votes" integer,
    "poster_path" text,
    "poster_last_checked" timestamptz,
    "tmdb_id" bigint,
    "watchmode_id" bigint,
    "created_at" timestamptz not null default now(),
    "updated_at" timestamptz not null default now()
);

-- set primary key for movie
alter table "public"."movie" add constraint "movie_pkey" primary key ("tconst");

-- create user_platform table
create table "public"."user_platform" (
    "user_id" uuid not null,
    "platform_id" smallint not null
);

-- set primary key for user_platform
alter table "public"."user_platform" add constraint "user_platform_pkey" primary key ("user_id", "platform_id");

-- add foreign key constraints for user_platform
alter table "public"."user_platform" add constraint "user_platform_user_id_fkey" foreign key ("user_id") references "auth"."users" ("id") on delete cascade;
alter table "public"."user_platform" add constraint "user_platform_platform_id_fkey" foreign key ("platform_id") references "public"."platform" ("id") on delete cascade;

-- create user_movie table
create table "public"."user_movie" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "tconst" text not null,
    "watchlisted_at" timestamptz,
    "watchlist_deleted_at" timestamptz,
    "watched_at" timestamptz,
    "added_from_ai_suggestion" boolean not null default false
);

-- set primary key for user_movie
alter table "public"."user_movie" add constraint "user_movie_pkey" primary key ("id");

-- add unique constraint for user_id and tconst
alter table "public"."user_movie" add constraint "user_movie_user_id_tconst_key" unique ("user_id", "tconst");

-- add foreign key constraints for user_movie
alter table "public"."user_movie" add constraint "user_movie_user_id_fkey" foreign key ("user_id") references "auth"."users" ("id") on delete cascade;
alter table "public"."user_movie" add constraint "user_movie_tconst_fkey" foreign key ("tconst") references "public"."movie" ("tconst") on delete cascade;

-- create movie_availability table
create table "public"."movie_availability" (
    "tconst" text not null,
    "platform_id" smallint not null,
    "is_available" boolean,
    "last_checked" timestamptz not null,
    "source" text not null,
    "details" jsonb
);

-- set primary key for movie_availability
alter table "public"."movie_availability" add constraint "movie_availability_pkey" primary key ("tconst", "platform_id");

-- add foreign key constraints for movie_availability
alter table "public"."movie_availability" add constraint "movie_availability_tconst_fkey" foreign key ("tconst") references "public"."movie" ("tconst") on delete cascade;
alter table "public"."movie_availability" add constraint "movie_availability_platform_id_fkey" foreign key ("platform_id") references "public"."platform" ("id") on delete cascade;

-- create ai_suggestion_batch table
create table "public"."ai_suggestion_batch" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "generated_at" timestamptz not null default now(),
    "expires_at" timestamptz not null,
    "prompt" text,
    "response" jsonb
);

-- set primary key for ai_suggestion_batch
alter table "public"."ai_suggestion_batch" add constraint "ai_suggestion_batch_pkey" primary key ("id");

-- add foreign key constraints for ai_suggestion_batch
alter table "public"."ai_suggestion_batch" add constraint "ai_suggestion_batch_user_id_fkey" foreign key ("user_id") references "auth"."users" ("id") on delete cascade;

-- create event table (partitioned)
create table "public"."event" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid,
    "event_type" text not null,
    "occurred_at" timestamptz not null default now(),
    "properties" jsonb
) partition by range (occurred_at);

-- set primary key for event
-- note: primary key must include partition key
alter table "public"."event" add constraint "event_pkey" primary key ("id", "occurred_at");

-- add foreign key constraints for event
alter table "public"."event" add constraint "event_user_id_fkey" foreign key ("user_id") references "auth"."users" ("id") on delete set null;

-- create integration_error_log table (partitioned)
create table "public"."integration_error_log" (
    "id" bigint generated by default as identity not null,
    "api_type" text not null,
    "error_message" text not null,
    "error_details" jsonb,
    "user_id" uuid,
    "occurred_at" timestamptz not null default now()
) partition by range (occurred_at);

-- set primary key for integration_error_log
-- note: primary key must include partition key
alter table "public"."integration_error_log" add constraint "integration_error_log_pkey" primary key ("id", "occurred_at");

-- add foreign key constraints for integration_error_log
alter table "public"."integration_error_log" add constraint "integration_error_log_user_id_fkey" foreign key ("user_id") references "auth"."users" ("id") on delete set null;


-- indexes

-- movie indexes
create index "movie_tmdb_id_idx" on "public"."movie" ("tmdb_id") where (tmdb_id is not null);
create index "movie_watchmode_id_idx" on "public"."movie" ("watchmode_id") where (watchmode_id is not null);
create index "movie_primary_title_idx" on "public"."movie" using gin (public.immutable_unaccent(lower(primary_title)) extensions.gin_trgm_ops);
create index "movie_start_year_idx" on "public"."movie" ("start_year");
create index "movie_genres_idx" on "public"."movie" using gin ("genres");

-- user_movie indexes
create index "user_movie_watchlist_idx" on "public"."user_movie" ("user_id") where (watchlisted_at is not null and watchlist_deleted_at is null);
create index "user_movie_watched_idx" on "public"."user_movie" ("user_id") where (watched_at is not null);

-- movie_availability indexes
create index "movie_availability_available_idx" on "public"."movie_availability" ("tconst", "platform_id") where (is_available is true);


-- row level security

-- platform rls
alter table "public"."platform" enable row level security;
create policy "allow authenticated read access to platforms" on "public"."platform" for select to authenticated using (true);

-- user_platform rls
alter table "public"."user_platform" enable row level security;
create policy "allow owner access to user_platform" on "public"."user_platform" for all using (auth.uid() = user_id);

-- movie rls
alter table "public"."movie" enable row level security;
create policy "allow authenticated read access to movies" on "public"."movie" for select to authenticated using (true);

-- user_movie rls
alter table "public"."user_movie" enable row level security;
create policy "allow owner access to user_movie" on "public"."user_movie" for all using (auth.uid() = user_id);

-- movie_availability rls
alter table "public"."movie_availability" enable row level security;
create policy "allow authenticated read access to movie_availability" on "public"."movie_availability" for select to authenticated using (true);

-- ai_suggestion_batch rls
alter table "public"."ai_suggestion_batch" enable row level security;
create policy "allow owner access to ai_suggestion_batch" on "public"."ai_suggestion_batch" for all using (auth.uid() = user_id);

-- event rls
alter table "public"."event" enable row level security;
create policy "allow owner access to their events" on "public"."event" for all using (auth.uid() = user_id);
create policy "allow service_role full access to events" on "public"."event" for all to service_role using (true);


-- integration_error_log rls
alter table "public"."integration_error_log" enable row level security;
create policy "allow service_role full access to integration_error_log" on "public"."integration_error_log" for all to service_role using (true);
