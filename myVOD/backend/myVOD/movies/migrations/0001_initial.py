# Generated by Django 5.2.7 on 2025-10-10 08:46

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AiSuggestionBatch",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("user_id", models.UUIDField()),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("prompt", models.TextField(blank=True, null=True)),
                ("response", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "ai_suggestion_batch",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("user_id", models.UUIDField(blank=True, null=True)),
                ("event_type", models.TextField()),
                ("occurred_at", models.DateTimeField()),
                ("properties", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "event",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="IntegrationErrorLog",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("api_type", models.TextField()),
                ("error_message", models.TextField()),
                ("error_details", models.JSONField(blank=True, null=True)),
                ("user_id", models.UUIDField(blank=True, null=True)),
                ("occurred_at", models.DateTimeField()),
            ],
            options={
                "db_table": "integration_error_log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Movie",
            fields=[
                ("tconst", models.TextField(primary_key=True, serialize=False)),
                ("primary_title", models.TextField()),
                ("original_title", models.TextField(blank=True, null=True)),
                ("start_year", models.SmallIntegerField(blank=True, null=True)),
                ("genres", models.JSONField(blank=True, null=True)),
                (
                    "avg_rating",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=3, null=True
                    ),
                ),
                ("num_votes", models.IntegerField(blank=True, null=True)),
                ("poster_path", models.TextField(blank=True, null=True)),
                ("poster_last_checked", models.DateTimeField(blank=True, null=True)),
                ("tmdb_id", models.BigIntegerField(blank=True, null=True)),
                ("watchmode_id", models.BigIntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "movie",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Platform",
            fields=[
                ("id", models.SmallAutoField(primary_key=True, serialize=False)),
                ("platform_slug", models.TextField(unique=True)),
                ("platform_name", models.TextField()),
            ],
            options={
                "db_table": "platform",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UserMovie",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("user_id", models.UUIDField()),
                ("watchlisted_at", models.DateTimeField(blank=True, null=True)),
                ("watchlist_deleted_at", models.DateTimeField(blank=True, null=True)),
                ("watched_at", models.DateTimeField(blank=True, null=True)),
                ("added_from_ai_suggestion", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "user_movie",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UserPlatform",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_id", models.UUIDField()),
            ],
            options={
                "db_table": "user_platform",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MovieAvailability",
            fields=[
                (
                    "tconst",
                    models.OneToOneField(
                        db_column="tconst",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="movies.movie",
                    ),
                ),
                ("is_available", models.BooleanField(blank=True, null=True)),
                ("last_checked", models.DateTimeField()),
                ("source", models.TextField()),
                ("details", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "movie_availability",
                "managed": False,
            },
        ),
    ]
